var isQueryValid = require('query-validator');
var mongoose = require('mongoose');
var Place = require('models').Place;
var geolib = require('geolib');
var async = require('async');
var match = require('matching-calculator');
var _ = require('lodash');

const R = 6371;

module.exports = {
    getPlaces: function(query, callback){
        var requiredFields = ['hashtags', 'lat', 'lon', 'distance'];
        var maxDistance = query.distance; // in meters
        var maxDistanceRadians = (maxDistance/1000) / R;
        var lat = query.lat;
        var lon = query.lon;

        if(!isQueryValid(query, requiredFields)) return callback(new Error('Query not valid'));
        query.hashtags = query.hashtags.split(',');

        Place
            .where({hashtags : {"$in" : query.hashtags}})
            .where('location')
            .near({center: [lon, lat], maxDistance: maxDistanceRadians, spherical: true})
            .exec(function(err, result){
                if(err) return callback(err);
                var places = result.map(function(place){
                    return place.toObject();
                });

                async.map(places, augmentPlace, function(err, augmentedPlaces){
                    if(err) return callback(err);
                    console.log(augmentedPlaces);
                    return callback(null, augmentedPlaces);
                });

                function augmentPlace(place, cb){
                    var placeLat = place.location[1];
                    var placeLon = place.location[0];

                    place.distance = geolib.getDistance(
                        {latitude: placeLat, longitude: placeLon},
                        {latitude: lat, longitude: lon}
                    );

                    match.getMatching(query.hashtags, place.hashtags, function(err, matching){
                        if(err) return cb(err);
                        place.matching = matching;
                        return cb(null, place);
                    });
                }

            });
    },
    getPlace: function(params, callback){
        var query = params.query;
        var queryId = params.id;
        var requiredFields = ['lat', 'lon'];
        var lat = query.lat;
        var lon = query.lon;

        if(!isQueryValid(query, requiredFields)) return callback(new Error('Query not valid'));
        Place
            .where({_id : queryId})
            .findOne(function(err, place){
                if(err) return callback(err);
                if(!place) return callback(null, null);
                place = place.toObject();
                place.distance = geolib.getDistance(
                    {latitude: query.lat, longitude: query.lon},
                    {latitude: place.location[1], longitude: place.location[0]}
                );
                return callback(null, place);
            })
    }
};