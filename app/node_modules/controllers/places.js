var queries = require('es-queries');
var config = require('configator');
var geolib = require('geolib');
var queryValidator = require('query-validator');
var _ = require('lodash');

function places(client){
    return {

        /**
         * Return all the places that match the query
         * @param query
         * @param callback
         * @returns {*}
         */

        getPlaces: function(query, callback){
            var q = queryValidator(query, 'places');
            if(q.errorMess) return callback(new Error(q.errorMess));

            client.search(queries.places.getAll(q)).then(function(resp){
                if(!resp.hits.hits.length) return callback(null, false);

                var places = _.map(resp.hits.hits, function(place){
                    var source = place._source;
                    var distance = getDistance(source, {lat: q.lat, lon: q.lon});
                    return _.assign(source , {id: place._id, distance: distance});
                });

                return callback(null, places);
            }, callback);
        },

        /**
         * Return all the places of the user
         * @param params
         * @param callback
         */

        getMyPlaces: function(params, callback){
            return callback(null, false);
        },

        /**
         * Return a place which match the id passed in params
         * @param params
         * @param callback
         */

        getPlace: function(params, callback){
            var id = params.id;

            var q = queryValidator(params.query, 'place');
            if(q.errorMess) return callback(new Error(q.errorMess));

            client.search(queries.places.getOne(id)).then(function(resp){
                var result = resp.hits.hits[0];
                if(!result) return callback(null, false);

                var source = result._source;
                var distance = getDistance(source, {lat: q.lat, lon: q.lon});
                var place = _.assign(source , {id: id, distance: distance});
                return callback(null, place);
            }, callback);
        }
    }
}


/*
  UTILS
 */

function getDistance(place, options){
    var placeCoords = {latitude: place.location[0], longitude: place.location[1]};
    var userCoords = {latitude: options.lat, longitude: options.lon};
    return geolib.getDistance(placeCoords, userCoords, 10);

}

module.exports = places;