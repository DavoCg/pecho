var isQueryValid = require('query-validator');
var mongoose = require('mongoose');
var Place = require('models').Place;
var geolib = require('geolib');
var async = require('async');
var match = require('matching-calculator');

const R = 6371;

module.exports = {
    getPlaces: function(req, res, next){
        var query = req.query;
        var requiredFields = ['hashtags', 'lat', 'lon', 'distance'];
        var maxDistance = query.distance; // in meters
        var maxDistanceRadians = (maxDistance/1000) / R;
        var lat = query.lat;
        var lon = query.lon;

        if(!isQueryValid(query, requiredFields)) return next(new Error('Query not valid'));

        Place
            .where({hashtags : {"$in" : query.hashtags.split(',')}})
            .where('location')
            .near({center: [lon, lat], maxDistance: maxDistanceRadians, spherical: true})
            .exec(function(err, result){
                if(err) return next(err);
                var places = result.map(function(place){
                    return place.toObject();
                });

                async.map(places, augmentPlace, function(err, augmentedPlaces){
                    if(err) return next(err);
                    res.status(200).send(augmentedPlaces)
                });

                function augmentPlace(place, callback){
                    var placeLat = place.location[1];
                    var placeLon = place.location[0];

                    place.distance = geolib.getDistance(
                        {latitude: placeLat, longitude: placeLon},
                        {latitude: lat, longitude: lon}
                    );

                    match.getMatching(query.hashtags, place.hashtags, function(err, matching){
                        if(err) return callback(err);
                        place.matching = matching;
                        return callback(null, place);
                    });
                }

            });
    },
    getPlace: function(req, res, next){
        var query = req.query;
        var requiredFields = ['lat', 'lon'];
        var lat = query.lat;
        var lon = query.lon;

        if(!isQueryValid(query, requiredFields)) return next(new Error('Query not valid'));
        Place
            .where({_id : req.params.id})
            .findOne(function(err, place){
                if(err) return next(err);
                if(!place) return res.status(404).send('No result');
                place = place.toObject();
                place.distance = geolib.getDistance(
                    {latitude: query.lat, longitude: query.lon},
                    {latitude: place.location[1], longitude: place.location[0]}
                );
                res.status(200).send(place);
            })
    }
};