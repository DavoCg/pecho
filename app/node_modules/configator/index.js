var path = require('path');
var _slice = Array.prototype.slice;

module.exports = (function(){
    var _directory = path.join(process.cwd(), 'config');
    var _env = process.env.NODE_ENV || 'development';
    var hConfig = {};

    function _merge(dest/*, sources...*/){
        var l = arguments.length;
        var src, key, value, srcKey;

        for (var i = 1; i < l; i++){
            src = arguments[i];
            for (key in src){
                if(src.hasOwnProperty(key)){
                    value = src[key];
                    if(value && value.constructor === Object){
                        srcKey = dest[key] || (dest[key] = {});
                        _merge(srcKey, value);
                    } else {
                        dest[key] = value;
                    }
                }
            }
        }
        return dest;
    }

    hConfig.load = function(name){
        var loaded, config;
        try {
            loaded = /^(\/|\.)/.test(name) ? require(name) : require(path.join(_directory, name));
            config = _merge({}, loaded.all || {}, loaded[_env] || {}, {env: _env});
        } catch (err) {
            err.message = 'Count not load configuration file for ' + name + ' : ' + err.message;
            throw err;
        }

        return config;
    };

    hConfig.resolve = function(name){
        return [_env, name].join('_');
    };

    hConfig.get = function get(name){
        var cacheName = this.resolve(name);
        if(!this.get._cache) this.get._cache = {};
        if(!this.get._cache[cacheName]) this.get._cache[cacheName] = this.load(name);
        return this.get._cache[cacheName];
    };

    return {
        get: function(name, field){
            var config = hConfig.get(name);
            return field ? config[field] : config;
        },
        clearCache: function(){
            hConfig.get.cache = {};
            return this;
        },
        setDirectory: function(){
            _directory = path.resolve.apply(path, [process.cwd()].concat(_slice.call(arguments)));
            return this;
        },
        getEnv: function(){
            return _env;
        },
        setEnv: function(env){
            _env = env;
            return this;
        }
    }
})();